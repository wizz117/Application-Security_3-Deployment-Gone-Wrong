Issues encountered in this challenge:

While reviewing the codebase, three critical vulnerabilities were identified where sensitive information was exposed as part of the application configuration. These issues are as follows:

1) SECRET_KEY in GiftcardSite/GiftcardSite/settings.py
-The SECRET_KEY, essential for database encryption and securing the Django application, was directly stored as plaintext in the settings.py file. This made it highly vulnerable and easily accessible

2) MySQL Password in GiftcardSite/k8/django-deploy.yaml
-The MySQL password thisisatestthing. was hardcoded in the Kubernetes deployment YAML file. Although the password was being passed as an environment variable (MYSQL_ROOT_PASSWORD), it was still exposed in the YAML file, making it accessible to anyone with access to the file.

3) MySQL Password in db/k8/db-deployment.yaml
-Similar to the first issue, the MySQL password thisisatestthing. was hardcoded in the database deployment YAML file (db-deployment.yaml). This exposure posed a significant security risk.





Fixes I did to overcome them:

1) 3) Fix for SECRET_KEY in GiftcardSite/GiftcardSite/settings.py
- To address this, I updated the SECRET_KEY in the settings.py file to be fetched from an environment variable. I created a Kubernetes secret to securely store the key with the following command: kubectl create secret generic db-secret-key --from-literal=db-secret-key='kmgysa#fz+9(z1*=c0ydrjizk*7sthm2ga1z4=^61$cxcq8b$l'
- Next, I modified the settings.py file to fetch the key from the environment variable: "SECRET_KEY = os.getenv('SECRET_KEY', 'fallback-secret-key')"
- Finally, I updated the django-deploy.yaml file to include the DB_SECRET_KEY environment variable. Its value is now securely fetched from the Kubernetes secret: 
- name: DB_SECRET_KEY
  valueFrom:
    secretKeyRef:
      name: db-secret-key
      key: db-secret-key
 
2) Fix for MySQL Password in GiftcardSite/k8/django-deploy.yaml
-To fix this, I created a Kubernetes secret to securely store the MySQL password. I used the following command to generate the secret: "kubectl create secret generic my-sql-user --from-literal=my-sql-user='thisisatestthing.'"
-I then updated the django-deploy.yaml file to fetch the password from the secret instead of hardcoding it. Hereâ€™s the updated environment variable configuration:
 - name: MYSQL_ROOT_PASSWORD
  valueFrom:
    secretKeyRef:
      name: my-sql-user
      key: my-sql-user

3) Fix for MySQL Password in db/k8/db-deployment.yaml
-I applied the same approach to the db-deployment.yaml file. I updated the MYSQL_ROOT_PASSWORD environment variable to reference the Kubernetes secret (my-sql-user). The updated YAML snippet looks like this:
- name: MYSQL_ROOT_PASSWORD
  valueFrom:
    secretKeyRef:
      name: my-sql-user
      key: my-sql-user




By implementing these fixes, I ensured that sensitive information like passwords and keys are no longer exposed in the code or deployment files. This improves the overall security of the application and prevents unauthorized access to critical data.
